/**
 * @jest-environment jsdom
 */

import { expectType } from 'tsd'

import * as _ from '../src'

test('isNull íƒ€ìž… í…ŒìŠ¤íŠ¸', () => {
  const result = _.isNull(null)
  expectType<boolean>(result)
})

test('isNil íƒ€ìž… í…ŒìŠ¤íŠ¸', () => {
  const result = _.isNil(undefined)
  expectType<boolean>(result)
})

test('isNumber íƒ€ìž… í…ŒìŠ¤íŠ¸', () => {
  const result = _.isNil(1234)
  expectType<boolean>(result)
})

test('shuffle íƒ€ìž… í…ŒìŠ¤íŠ¸', () => {
  const result = _.shuffle([1, 2, 3, 4, 'compy'])
  expectType<(number | string)[]>(result)
})

test('pick íƒ€ìž… í…ŒìŠ¤íŠ¸', () => {
  const testValue = { a: 'ðŸ¦–', b: 'ðŸ¦•' }
  const result = _.pick(testValue, 'a')

  expectType<Record<'a', string>>(result)
})

test('omit íƒ€ìž… í…ŒìŠ¤íŠ¸', () => {
  const testValue = { a: 'ðŸ¦–', b: 'ðŸ¦•' }
  const result = _.omit(testValue, 'a')

  expectType<Record<'b', string>>(result)
})

test('memoized íƒ€ìž… í…ŒìŠ¤íŠ¸', () => {
  const testFunction = _.memoize((a: string) => {
    return a
  })

  expectType<(a: string) => string>(testFunction)
})

test('debounce íƒ€ìž… í…ŒìŠ¤íŠ¸', () => {
  const testDebounced = _.debounce((text: string) => console.log(`2ì´ˆ í›„ í‘œì‹œ: ${text}`), 2000)

  expectType<(text: string) => void>(testDebounced)
})

/* _(".button").addEvent("click", function (event) {
  expectType<MouseEvent>(event);
});
 */
